October 30, 2021

What I worked on: First iteration of thermostat code. Allowed us to increment and decrement the temperature via the buttons on the PCB. Also was able to get accurate readings from MCP9804
as well as turn on and off LEDs. 

- Uses Adafruit MCP9808 library with small modification in device register address to work for MCP9804 temperature sensor. 

- One issue with this however, is that there is too long of a delay from button press to when temperature actually increases.
- To combat this issue, instead of using MCP9808 library to read and send data, will read and write data serially instead using wire library. 



#include "Adafruit_MCP9808.h"
#include <string.h>
#include <stdlib.h>

//this following macro is good for debugging, e.g.  print2("myVar= ", myVar);
#define print2(x,y) (Serial.print(x), Serial.println(y))


#define CR '\r'
#define LF '\n'
#define BS '\b'
#define NULLCHAR '\0'
#define SPACE ' '

#define COMMAND_BUFFER_LENGTH        25                        
char   CommandLine[COMMAND_BUFFER_LENGTH + 1];                 

const char *delimiters  = ", \n";

const char *incrementTempToken  = "inc";                 
const char *decrementTempToken  = "dec";
float setTemp = 25;



/*************************************************************************************************************
    getCommandLineFromSerialPort()
      Return the string of the next command. Commands are delimited by return"
      Handle BackSpace character
      Make all chars lowercase
*************************************************************************************************************/

bool getCommandLineFromSerialPort(char * commandLine)
{
  static uint8_t charsRead = 0;                      //note: COMAND_BUFFER_LENGTH must be less than 255 chars long
  //read asynchronously until full command input
  while (Serial.available()) {
    char c = Serial.read();
    switch (c) {
      case CR:      //likely have full command in buffer now, commands are terminated by CR and/or LS
      case LF:
        commandLine[charsRead] = NULLCHAR;       //null terminate our command char array
        if (charsRead > 0)  {
          charsRead = 0;                           //charsRead is static, so have to reset
          Serial.println(commandLine);
          return true;
        }
        break;
      case BS:                                    // handle backspace in input: put a space in last char
        if (charsRead > 0) {                        //and adjust commandLine and charsRead
          commandLine[--charsRead] = NULLCHAR;
          Serial << byte(BS) << byte(SPACE) << byte(BS);  //no idea how this works, found it on the Internet
        }
        break;
      default:
        
        if (charsRead < COMMAND_BUFFER_LENGTH) {
          commandLine[charsRead++] = c;
        }
        commandLine[charsRead] = NULLCHAR;     //just in case
        break;
    }
  }
  return false;
}



int readNumber () {
  char * numTextPtr = strtok(NULL, delimiters);         
  return atoi(numTextPtr);                              
}

char * readWord() {
  char * word = strtok(NULL, delimiters);              
  return word;
}

void
nullCommand(char * ptrToCommandName) {
  print2("Command not found: ", ptrToCommandName);      
}




int incrementTemp(int temp) {                                     
  temp += 1;
  return temp;
}

int decrementTemp(int temp) {                               
  temp -= 1;
  return temp;
}


int DoMyCommand(const char *commandLine, int temp) {
  //  print2("\nCommand: ", commandLine);
  int result;

  char * ptrToCommandName = strtok(commandLine, delimiters);
  //  print2("commandName= ", ptrToCommandName);

  if (strcmp(ptrToCommandName, incrementTempToken) == 0) {            
    result = incrementTemp(temp);
    print2("The temperature is now ", result);
    return result;

  } else {
    if (strcmp(ptrToCommandName, decrementTempToken) == 0) {           
      result = decrementTemp(temp);                                       
      print2("The temperature is now ", result);
      return result;

    } else {
      nullCommand(ptrToCommandName);
      return temp;
    }
  }
}

Adafruit_MCP9808 tempsensor = Adafruit_MCP9808();

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  while (!Serial); //waits for serial terminal to be open, necessary in newer arduino boards.
  Serial.println("MCP9808 demo");

  if (!tempsensor.begin(0x19)) {
    Serial.println("Couldn't find MCP9808! Check your connections and verify the address is correct.");
    while (1);
  }

  pinMode(4,OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(8, INPUT);
  pinMode(9, INPUT);
  pinMode(10, INPUT);

}

void loop() {
  // put your main code here, to run repeatedly:
  Serial.println("wake up MCP9808.... "); // wake up MCP9808 - power consumption ~200 mikro Ampere
  tempsensor.wake();   // wake up, ready to read!
  String a = Serial.readString();
  // Read and print out the temperature, also shows the resolution mode used for reading.
  Serial.print("Resolution in mode: ");
  Serial.println (tempsensor.getResolution());
  float c = tempsensor.readTempC();
  int temp = DoMyCommand(a.c_str(), setTemp);
  setTemp = temp;
  Serial.print(c, 4); Serial.print("*C\t and "); 
  //Serial.print(f, 4); Serial.println("*F.");

  

  
  
  delay(2000);
  Serial.println("Shutdown MCP9808.... ");
  tempsensor.shutdown_wake(1); // shutdown MSP9808 - power consumption ~0.1 mikro Ampere, stops temperature sampling
  Serial.println("");
  delay(200);

}
